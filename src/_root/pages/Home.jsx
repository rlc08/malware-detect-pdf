import React, { useCallback, useState } from "react";
import { useDropzone } from "react-dropzone";
import {
    FaFilePdf,
    FaUpload,
    FaCheckCircle,
    FaTimesCircle,
} from "react-icons/fa";
import axios from "axios";
import { useNavigate } from "react-router-dom";

const Home = () => {
    const [uploadedFiles, setUploadedFiles] = useState([]);
    const [uploadError, setUploadError] = useState(null);
    const [uploading, setUploading] = useState(false);
    const [progress, setProgress] = useState(0);
    const navigate = useNavigate();
    const onDrop = useCallback((acceptedFiles, rejectedFiles) => {
        if (rejectedFiles.length > 0) {
            setUploadError("Only PDF files are accepted");
            return;
        }

        setUploadedFiles(
            acceptedFiles.map((file) =>
                Object.assign(file, { preview: URL.createObjectURL(file) })
            )
        );
        setUploadError(null);
        setProgress(0); // Reset progress on new file upload
    }, []);

    const { getRootProps, getInputProps, isDragActive } = useDropzone({
        onDrop,
        accept: { "application/pdf": [".pdf"] },
        multiple: false, // To accept only one file at a time
    });

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (uploadedFiles.length === 0) {
            setUploadError("Please upload a PDF file first");
            return;
        }

        // Get the original file and rename it to "test.pdf"
        const originalFile = uploadedFiles[0];
        const modifiedFileName = "test.pdf";

        // Create a new file with the name "test.pdf"
        const modifiedFile = new File([originalFile], modifiedFileName, {
            type: originalFile.type,
        });

        const formData = new FormData();
        formData.append("pdf", modifiedFile);

        // Log the formData to console to check the file name
        for (let [key, value] of formData.entries()) {
            console.log(`${key}: ${value.name}`); // Logs the key and file name, should log "pdf: test.pdf"
        }

        try {
            setUploading(true);
            const response = await axios.post(
                "https://mini-project-3wba.onrender.com/upload",
                formData,
                {
                    headers: { "Content-Type": "multipart/form-data" },
                    onUploadProgress: (progressEvent) => {
                        const percentCompleted = Math.round(
                            (progressEvent.loaded * 100) / progressEvent.total
                        );
                        setProgress(percentCompleted);
                    },
                }
            );

            // Wait for the response before navigating
            if (response && response.data) {
                const result = response.data.result; // Extract malware detection result
                console.log("Result from backend:", result); // Debugging the result
                navigate("/result", {
                    state: { result, fileName: originalFile.name },
                }); // Redirect to the result page with data
            }
        } catch (error) {
            console.error("Error uploading file", error);
            setUploadError("Error uploading file. Please try again.");
        } finally {
            setUploading(false);
        }
    };

    return (
        <div className="min-h-screen flex flex-col items-center p-6 bg-gray-100 font-sans">
            <header className="mb-10 text-center">
                <h1 className="text-4xl font-bold text-gray-900">
                    PDF Malware Detection System
                </h1>
                <p className="mt-2 text-gray-600 text-lg">
                    Upload your PDF files to scan for potential malware.
                </p>
            </header>

            <div className="w-full max-w-xl">
                {/* File Upload Area */}
                <div
                    {...getRootProps()}
                    className={`p-6 bg-white shadow-md rounded-lg border-2 border-dashed border-gray-300 flex flex-col items-center justify-center cursor-pointer transition duration-200 
          ${isDragActive ? "bg-blue-50" : "bg-white"}`}
                >
                    <input {...getInputProps()} />
                    {isDragActive ? (
                        <p className="text-blue-500 font-semibold text-lg flex items-center">
                            <FaUpload className="mr-2" /> Drop the files here...
                        </p>
                    ) : (
                        <div className="flex flex-col items-center">
                            <FaFilePdf className="text-gray-600 text-6xl mb-3" />
                            <p className="text-gray-700 font-medium text-lg">
                                Drag & drop a PDF file here, or click to select
                                one
                            </p>
                            <p className="text-gray-500 text-sm mt-1">
                                (Only PDF files are accepted)
                            </p>
                        </div>
                    )}
                </div>

                {/* Error Message */}
                {uploadError && (
                    <div className="mt-3 text-red-500 flex items-center">
                        <FaTimesCircle className="mr-2" /> {uploadError}
                    </div>
                )}

                {/* File Preview */}
                {uploadedFiles.length > 0 && (
                    <div className="mt-6 bg-white shadow-sm rounded-md p-4 flex items-center space-x-4 border border-gray-200">
                        <FaFilePdf className="text-red-500 text-4xl" />
                        <div>
                            <p className="text-gray-700 font-semibold">
                                {uploadedFiles[0].name}
                            </p>
                            <p className="text-gray-500 text-sm">
                                File is ready for malware scanning.
                            </p>
                        </div>
                        <FaCheckCircle className="text-green-500 text-3xl ml-auto" />
                    </div>
                )}

                {/* Progress Bar */}
                {uploading && (
                    <div className="mt-4 w-full bg-gray-200 rounded-full h-2.5">
                        <div
                            className="bg-blue-500 h-2.5 rounded-full"
                            style={{ width: `${progress}%` }}
                        ></div>
                    </div>
                )}

                {/* Submit Button */}
                {uploadedFiles.length > 0 && !uploading && (
                    <button
                        onClick={handleSubmit}
                        className="mt-6 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md transition-colors w-full"
                    >
                        Scan for Malware
                    </button>
                )}
            </div>

            {/* Informational Section */}
            <div className="mt-10 w-full max-w-2xl text-center mb-4">
                <h2 className="text-2xl font-semibold text-gray-900">
                    Why PDF Malware Detection?
                </h2>
                <p className="mt-4 text-gray-600">
                    PDFs are one of the most common formats for sharing
                    documents. However, malicious actors can embed harmful code
                    inside PDFs. Our system helps ensure your documents are safe
                    before you open them. Upload a file to scan it now.
                </p>
            </div>
            <div className="mt-4 text-sm text-gray-600 w-1/2">
                Sharing of your submission with the security community. Please
                do not submit any personal information; we are not responsible
                for the contents of your submission.
            </div>
        </div>
    );
};

export default Home;
